//
//  CreateOrderViewController.swift
//  CleanSwiftTry
//
//  Created by Kaushal Elsewhere on 10/05/2017.
//  Copyright (c) 2017 Elsewhere. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CreateOrderViewControllerInput {
    func displayPrice(viewModel: CreateOrder_Price_ViewModel)
    func displaySomething(viewModel: CreateOrder.Something.ViewModel)
}

protocol CreateOrderViewControllerOutput {
    var shippingMethods: [String] { get }
    
    func calculatePrice(request: CreateOrder_Price_Request)
    
    func doSomething(request: CreateOrder.Something.Request)
    
    //func getPaymentOptions()
}

class CreateOrderViewController: UIViewController, CreateOrderViewControllerInput {
    var output: CreateOrderViewControllerOutput!
    var router: CreateOrderRouter!
  
    lazy var shippingTextField: UITextField = {
        let textField = UITextField()
        //textField.center = self.view.center
        textField.textColor = .blackColor()
        textField.font = UIFont(name: "HelveticaNeue", size: 20)
        textField.textAlignment = .Center
        //textField.backgroundColor = .lightGrayColor()
        textField.layer.cornerRadius = 4.0
        textField.layer.borderWidth = 1.0
        textField.layer.masksToBounds = false
        
        return textField
    }()
    
    var pickerView: UIPickerView = {
        let picker = UIPickerView()
        
        return picker
    }()
    
    init() {
        super.init(nibName: nil, bundle: nil)
        CreateOrderConfigurator.sharedInstance.configure(self)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
    }
    
    func configurePicker() {
        pickerView.delegate = self
        pickerView.dataSource = self
        pickerView.frame = CGRect(x: 0, y: view.bounds.height-250, width: view.bounds.width, height: 250)
        view.addSubview(pickerView)
    }
  
    func setupViews() {
        view.backgroundColor = .whiteColor()
        shippingTextField.frame = CGRect(x:0, y: 0, width: 250, height: 40)
        shippingTextField.center = CGPoint(x: view.center.x, y: 100)
        view.addSubview(shippingTextField)
        
        configurePicker()
        setDefaultValue()

    }
    
    func setDefaultValue() {
        pickerView.selectRow(0, inComponent: 0, animated: false)
        let request = CreateOrder_Price_Request(selectedIndex: 0)
        output.calculatePrice(request)
    }
  
    // MARK: - Display logic
  
    func displaySomething(viewModel: CreateOrder.Something.ViewModel) {
    }
    
    func displayPrice(viewModel: CreateOrder_Price_ViewModel) {
        shippingTextField.text = viewModel.price
        print(viewModel.price)
    }
}
extension CreateOrderViewController: UIPickerViewDataSource, UIPickerViewDelegate {
    func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return output.shippingMethods.count
    }
    
    func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return output.shippingMethods[row]
    }
    
    func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        
        let request = CreateOrder_Price_Request(selectedIndex: row)
        output.calculatePrice(request)
    }
}
